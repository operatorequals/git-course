#!/usr/bin/env python3

MASTER_COMMIT = "d52ee36796d6aa069a17794c12efd7a3d33030ea"
FILES_TO_CHANGE = ["main.py"]

import pygit2
import sys
import os

from gitcourselib import check_commit, _logprint

# Initialize Repository object
repo_path = pygit2.discover_repository(os.getcwd())
repo = pygit2.Repository(repo_path)

# Commit to check against
MASTER_COMMIT_OBJ = repo.get(MASTER_COMMIT)

# Argument 1 is refs/heads/<branch-name>
ref = sys.argv[1]
ref_obj = repo.references[ref]

if str(repo.merge_base(MASTER_COMMIT, ref_obj.target)) != MASTER_COMMIT:
  _logprint("[{ref_obj.name}] Branch incompatible with 'master' - please rebase...", ref)
  sys.exit(2)


def check_logging(commit):
  tree = commit.tree
  # Check against previous from the splitted commit (does not contain 'about' yet)
  diff = tree.diff_to_tree(commit.parents[0].tree)
  patches = [p for p in diff]

  # Looking for the patch against 'main.py'
  checked_patch = None
  for p in patches:
    if p.delta.new_file.path == "main.py":
      checked_patch = p
      break
  if checked_patch is None:
    return False, f"[{commit.id}] The [Logging] commit has not changed the 'main.py' file."

  # Examine all commited hunks for lines
  # All changed lines must contain the `app.logger` keyword (they are all relevant to logging)
  log_lines = 0
  for hunk in checked_patch.hunks:
    for l in hunk.lines:
      if l.new_lineno == -1:
        log_lines += 1
        if "app.logger" not in l.content:
          return False, f"[{commit.id}] [Logging] commit seems to not contain `log` code."

  if log_lines < 2:
    return False, f"[{commit.id}] [Logging] commit seems to not contain `log` code."

  return True, f"[{commit.id}][Logging] commit passes!"


def check_routes(commit):
  tree = commit.tree
  # Check against previous from the splitted commit (does not contain 'about' yet)
  diff = tree.diff_to_tree(commit.parents[0].tree)
  patches = [p for p in diff]

  # Looking for the patch against 'main.py'
  checked_patch = None
  for p in patches:
    if p.delta.new_file.path == "main.py":
      checked_patch = p
      break
  if checked_patch is None:
    return False, f"[{commit.id}] [Routes] commit has not changed the 'main.py' file."

  # Examine all commited hunks for lines
  # All changed lines must contain the `app.logger` keyword (they are all relevant to logging)
  route_code = ""
  for hunk in checked_patch.hunks:
    for l in hunk.lines:
      # print(l.origin, l.content, hunk)
      if l.new_lineno == -1:

        # print(l.origin, l.content, hunk)
        route_code += l.content

  if not( "/about" in route_code and "@app.route(" in route_code and "def " in route_code):
    return False, f"[{commit.id}] [Routes] commit does not seem to create the '/about' endpoint ."

  return True, f"[{commit.id}][Routes] commit passes!"


def check_diff(ref_obj):

  tree = ref_obj.peel().tree
  diff = tree.diff_to_index(repo.index)
  patches = [p for p in diff]

  if len(patches) > 2:
    return False, f"[{ref_obj.name}] Implementation of an endpoint should not require a new file."

  files_changed = {} # {filepath: similarity-ratio}
  for p in patches:
    if (p.delta.old_file.path != p.delta.new_file.path):
      return False, f"[{ref_obj.name}] Renaming a file should not be required."

    if p.delta.similarity != 0:
      files_changed[p.delta.old_file.path] = p.delta.similarity

  for f in files_changed.keys():
    if f not in FILES_TO_CHANGE:
      return False, f"[{ref_obj.name}] Looks like the file '{f}' is not modified."
    else:
      if files_changed[f] < 50 :
        return False, f"[{ref_obj.name}] Looks like the file '{f}' is modified too much."

  return True, f"[{ref_obj.name}] passes!"


checked_commits = 0
for commit in repo.walk(ref_obj.target, pygit2.GIT_SORT_TOPOLOGICAL):
  # If the master commit was found - stop traversing
  if str(commit.id) == MASTER_COMMIT:
      break

  # Check all commits for formatting
  pass_, message = check_commit(commit)
  _logprint(message, ref)
  if not pass_ :
    sys.exit(1)

  if commit.message.lower().startswith("[logging]"):
    checked_commits += 1
    pass_, message = check_logging(commit)
    _logprint(message, ref)
    if not pass_ :
      sys.exit(1)

  if commit.message.lower().startswith("[routes]"):
    checked_commits += 1
    pass_, message = check_routes(commit)
    _logprint(message, ref)
    if not pass_ :
      sys.exit(1)

# Either [Logging] or [Routes] commit is not available
if checked_commits != 2:
  _logprint(f"[{ref}] Two specific commits ([Routes] and [Logging]) are expected.", ref)
  sys.exit(1)

print()
# Check the final patch for sanity
pass_, message = check_diff(ref_obj)
_logprint(message, ref)
if not pass_ :
  sys.exit(1)

sys.exit(0)
