#!/usr/bin/env python3

MASTER_COMMIT = "6878b0e45977daa6d81d09b228e374f5cf4ef1c4"
FILES_TO_CHANGE = ["main.py"]

import pygit2
import sys
import os

from gitcourselib import check_commit, _logprint, get_title_tag, check_code

# Initialize Repository object
repo_path = pygit2.discover_repository(os.getcwd())
repo = pygit2.Repository(repo_path)

# Commit to check against
MASTER_COMMIT_OBJ = repo.get(MASTER_COMMIT)

# Argument 1 is refs/heads/<branch-name>
ref = sys.argv[1]
ref_obj = repo.references[ref]

if str(repo.merge_base(MASTER_COMMIT, ref_obj.target)) != MASTER_COMMIT:
  _logprint("[{ref_obj.name}] Branch incompatible with 'dev1_redir_feature' and 'dev2_analytics_feature' - please rebase...", ref)
  sys.exit(2)


def check_diff(ref_obj):

  tree = ref_obj.peel().tree
  diff = tree.diff_to_index(repo.index)
  patches = [p for p in diff]

  files_changed = {} # {filepath: similarity-ratio}
  for p in patches:
    if (p.delta.old_file.path != p.delta.new_file.path):
      return False, f"[{ref_obj.name}] Renaming a file should not be required."

    if p.delta.similarity != 0:
      files_changed[p.delta.old_file.path] = p.delta.similarity

  for f in files_changed.keys():
    if f not in FILES_TO_CHANGE:
      return False, f"[{ref_obj.name}] Looks like the file '{f}' is not modified."
    else:
      if files_changed[f] < 50 :
        return False, f"[{ref_obj.name}] Looks like the file '{f}' is modified too much."

  return True, f"[{ref_obj.name}] passes!"


def check_routes(commit):
  return check_code(commit, {
    'main.py': [
      "@app.route('/redirect', methods=['GET']",
      "redirect()",
      "redirect(url)",
      'request.args.get("url")',
      '"Need a `url` GET parameter"',
      ]
    }
  )

def check_logging(commit):
  return check_code(commit, {
    'main.py': [
        '''app.logger.info(f"[~] Redirect issued for '{url}'")'''
      ]
    }
  )

def check_security(commit):
  return check_code(commit, {
    'main.py': [
        "if any([redir.startswith(prot) for prot in ['http://', 'https://']]):"
      ]
    }
  )

def check_analytics(commit):
  return check_code(commit, {
    'main.py': [
        "from collections import defaultdict",
        "ANALYTICS",
        "ANALYTICS[url] += 1",
      ]
    },
  )

commit_checks = {
  'routes' : check_routes,
  'security' : check_security,
  'logging' : check_logging,
  'analytics' : check_analytics,
}


def check_commit_content(commit):
  commit_tag = get_title_tag(commit)
  if commit_tag.lower() == 'merge':
    return check_code(commit, {"main.py":[]}, conflict_leftover_check=True)

  if commit_tag.lower() not in commit_checks:
    return False, f"[{commit.id}] Commit does not seem to have a relevant title: '[{commit_tag}]...'"
    
  ret = commit_checks[commit_tag.lower()](commit)
  del commit_checks[commit_tag.lower()]
  return ret


for commit in repo.walk(ref_obj.target, pygit2.GIT_SORT_TOPOLOGICAL):
  # If the master commit was found - stop traversing
  if str(commit.id) == MASTER_COMMIT:
      break

  # Check all commits for formatting
  pass_, message = check_commit(commit)
  _logprint(message, ref)
  if not pass_ :
    sys.exit(1)

  # Check all commit content
  pass_, message = check_commit_content(commit)
  _logprint(message, ref)
  if not pass_ :
    sys.exit(1)

# All 4 commit tags need to have been checked
if len(commit_checks) > 0:
  _logprint(f"[{ref}] One or more commits are not submitted.", ref)
  sys.exit(1)

print()
# Check the final patch for sanity
pass_, message = check_diff(ref_obj)
_logprint(message, ref)
if not pass_ :
  sys.exit(1)

sys.exit(0)
